@inject HealthCare.Core.UserService.IUserService userService

<nav class="nav-flex">
    <div class="nav-item">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <span class="oi oi-home" aria-hidden="true"></span> Overview
        </NavLink>
    </div>
    <div class="nav-item">
        <NavLink class="nav-link" href="/accountsettings">
            <span class="oi oi-home" aria-hidden="true"></span> Account Settings
        </NavLink>
    </div>
    <div class="nav-item">
        <NavLink class="nav-link" href="feedback">
            <span class="oi oi-plus" aria-hidden="true"></span> Feedback
        </NavLink>
    </div>
    <AuthorizeView>
        <Authorized>
            @if (user is Patient)
            {
                <div class="nav-item">
                    <NavLink class="nav-link" href="appointment">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> <span class="no-wrap">Book appointment</span>
                    </NavLink>
                </div>
            }
            @if (user is CareGiver)
            {
                <div class="nav-item">
                    <NavLink class="nav-link" href="appointment">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Handle availability
                    </NavLink>
                </div>
            }
        </Authorized>

    </AuthorizeView>
</nav>

@code {
    private string? userEmail;
    private User user = new User();

    protected override async Task OnInitializedAsync()
    {
        userEmail = await userService.GetEmailAsync();
        user = userService.GetByEmail(userEmail);
    }

    @* private bool collapseNavMenu = true;

private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

private void ToggleNavMenu()
{
collapseNavMenu = !collapseNavMenu;
} *@
}
