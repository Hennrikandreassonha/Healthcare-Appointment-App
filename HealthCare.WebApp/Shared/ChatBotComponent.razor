@inject IJSRuntime JSRunTime
@using OpenAI
@inject IConfiguration config

<div class="popup-container" id="popup">
    @if (Chatting)
    {
        <div id="chat-div">
            <img @onclick="@ToggleChatting" src="\remove.png" id="close-chat-btn" title="Close">

            @foreach (var message in Messages)
            {
                @if (message.Author == "User")
                {
                    <div class="user-msg">
                        <span>@message.MessageContent</span>
                    </div>
                }
                else
                {
                    <div class="bot-msg">
                        <span>@message.MessageContent</span>
                    </div>
                }
            }
            @if (WaitingForResponse)
            {
                <div class="bot-msg">
                    <span class="loader"></span>
                </div>
            }
            <div id="question-div">
                <textarea placeholder="Enter your question" id="question-area" @bind="UserMessage"></textarea>

                <button class="btn btn-primary chat-btn" @onclick="@SendQuestion"
                    disabled="@WaitingForResponse">Chat</button>

            </div>
        </div>
    }
    else
    {
        @if (ShowChat)
        {
            <div class="info-text-div">
                <img @onclick="@ToggleChat" src="\remove.png" id="close-btn" title="Close">
                <span class="info-text">Do you have a question about a condition or do you need medical support?</span><br>
                <span class="info-text">Try our <u><strong><span style="color: #74AA9C;">ChatGpt</span></strong></u> powered
                    support chat</span>

                <img src="\call-center-agent.png" class="support-img">
                <button class="btn btn-primary chat-btn" @onclick="@StartChat">Chat</button>
            </div>

        }
        else
        {

            <div class="closed-flex" @onclick="@ToggleChat">
                <span>Click to <u><strong><span style="color: #74AA9C;">Chat</span></strong></u></span>
                <img src="\call-center-agent.png" class="support-img-mini">

            </div>
        }
    }
</div>
@code {
    bool ShowChat = true;
    bool Chatting = false;
    private class Message
    {
        public Message(string content, string author)
        {
            MessageContent = content;
            Author = author;
        }
        public string MessageContent { get; set; }
        public string Author { get; set; }
    }
    List<Message> Messages = new();
    ChatBotService ChatService = new();
    string UserMessage = "";
    bool WaitingForResponse = false;

    protected override async Task OnInitializedAsync()
    {

    }
    private void ToggleChatting()
    {
        Chatting = false;

    }
    private async void SendQuestion()
    {
        WaitingForResponse = true;
        StateHasChanged();
        Messages.Add(new Message(UserMessage, "User"));
        var answer = await ChatService.SendQuestion(UserMessage);
        UserMessage = "";
        Messages.Add(new Message(answer, "Bot"));
        await JSRunTime.InvokeAsync<Task>("scrollToBottom", new object[] { });
        WaitingForResponse = false;
        StateHasChanged();
    }
    private void StartChat()
    {
        var key = config.GetSection("ChatBot:Key").Value;

        ChatService = new ChatBotService(key!);
        Chatting = true;
    }
    private async void ToggleChat()
    {
        ShowChat = !ShowChat;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await Task.Delay(1000);
            var test = await JSRunTime.InvokeAsync<bool>("isDevice", new object[] { });

            await JSRunTime.InvokeAsync<Task>("openPopup", new object[] { });
        }

    }
}
