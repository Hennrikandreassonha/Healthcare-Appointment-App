@inject AppointmentService appointmentService
@inject AuthenticationStateProvider authStateProvider
@inject UserService userService;
@page "/appointment"
@using System.Globalization;
@using HealthCare.Core.Models.Appointment;
@inject EmailService emailService

<div class="appointment-flex">
    <div class="calendar">
        <header>
            <div id="header-div">
                <img @onclick="DecreaseMonth" src="\calendar-arrow.png" title="Change month" alt="Healhcare logo"
                    class="calendar-info-arrow">
                <h1 id="year-month">@yearMonth</h1>
                <img @onclick="IncreaseMonth" src="\calendar-arrow.png" title="Change month"
                    class="calendar-info-arrow rotate-180">
            </div>
        </header>

        <ul class="weekdays">
            <li>
                <abbr title="M">Monday</abbr>
            </li>
            <li>
                <abbr title="T">Tuesday</abbr>
            </li>
            <li>
                <abbr title="W">Wednesday</abbr>
            </li>
            <li>
                <abbr title="T">Thursday</abbr>
            </li>
            <li>
                <abbr title="F">Friday</abbr>
            </li>
            <li>
                <abbr title="S">Saturday</abbr>
            </li>
            <li>
                <abbr title="S">Sunday</abbr>
            </li>
        </ul>

        <ol class="day-grid">

            @for (int i = 0; i < GetStartDay(currentDate.Year, currentDate.Month); i++)
            {
                <li class="empty-day"></li>
            }
            @foreach (int item in CalendarInfoObj.Days)
            {
                <li class="date-day @(IsTodaysDate(item) ? "current-date" : "") @(CalendarInfoObj.DayFocused == item && CalendarInfoObj.Month == currentDate.Month ? "date-day-focus" : "")"
                    @onclick="() => HandleChosenDate(item)">@item</li>
            }
        </ol>
    </div>

    @if (chosenDay != null)
    {
        <div id="day-info">
            <header>

                <h3>There are @appointmentsForDate.Length appointments available for booking @chosenDay of
                    @CalendarInfoObj.GetMonthName(CalendarInfoObj.Month);
                </h3>
            </header>
            @if (successMsg != "")
            {
                <p class="alert alert-success">@successMsg</p>
            }
            @if (errorMsg != "")
            {
                <p class="alert alert-error">@successMsg</p>
            }
            <table>
                <thead>
                    <tr>
                        <th>Doctor</th>
                        <th>Contact</th>
                        <th>Appointment date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Appointment item in appointmentsForDate)
                    {
                        <tr>
                            <td>@item.CareGiver.FirstName @item.CareGiver.LastName</td>
                            <td>@item.CareGiver.Email</td>
                            <td>@item.DateTime.ToString("M/d/yyyy h:mm") - @item.DateTime.AddHours(1).ToString("h:mm")</td>
                            <td>
                                <select id="selectedService" @onchange="@(e => HandleServiceSelection((ServiceEnum)Enum.Parse(typeof(ServiceEnum), e.Value.ToString())))">
                                    <option value="">Select Service</option>
                                    @foreach (ServiceEnum service in Enum.GetValues(typeof(ServiceEnum)))
                                    {
                                        <option value="@service">@service</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => HandleBooking(item)">Book</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    }
</div>

@code {

    public class CalendarInfo
    {
        public int DayFocused { get; set; }
        public List<int> Days { get; set; }
        public int Month { get; set; }
        public CalendarInfo()
        {
            Days = new List<int>();
        }
        public string GetMonthName(int monthNumber)
        {
            CultureInfo cultureInfo = CultureInfo.CurrentCulture;
            return cultureInfo.DateTimeFormat.GetMonthName(monthNumber);
        }
    }
    private DateTime currentDate = DateTime.Now;
    private string yearMonth = "";
    //Appointments for the date that the user has selected.
    private Appointment[] appointmentsForDate = { };
    private int? chosenDay = null;
    private CalendarInfo CalendarInfoObj = new();
    private Patient? userLoggedIn;
    private string successMsg = "";
    private string errorMsg = "";
    Dictionary<DayOfWeek, int> weekdayDictionary = new Dictionary<DayOfWeek, int>
{
{ DayOfWeek.Monday, 0 },
{ DayOfWeek.Tuesday, 1 },
{ DayOfWeek.Wednesday, 2 },
{ DayOfWeek.Thursday, 3 },
{ DayOfWeek.Friday, 4 },
{ DayOfWeek.Saturday, 5 },
{ DayOfWeek.Sunday, 6 }
};
    private ServiceEnum selectedService;
    private void HandleServiceSelection(ServiceEnum service)
    {
        selectedService = service;
    }

    protected override async Task OnInitializedAsync()
    {
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userLoggedIn = userService.GetByEmail(user.FindFirst(c => c.Type ==
        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value) as Patient;

        appointmentService.AddSampleData();
    }
    private void HandleChosenDate(int day)
    {
        CalendarInfoObj.DayFocused = day;
        var dateToCheck = new DateTime(currentDate.Year, currentDate.Month, day);
        chosenDay = day;
        CalendarInfoObj.Month = currentDate.Month;
        appointmentsForDate = appointmentService.GetAppointmentsByDate(dateToCheck).ToArray();
    }
    private void HandleBooking(Appointment appointment)
    {
        var success = appointmentService.AddBooking(appointment, userLoggedIn.Id, selectedService);
        bool emailSentSuccess = false;
        if (success)
            emailSentSuccess = SendEmail(appointment, userLoggedIn);
        if (emailSentSuccess)
        {
            successMsg = "Your appointment was booked successfully! Please check your email for confirmation.";
            return;
        }

        errorMsg = "There was a problem booking your appointment, please try again";
    }
    public bool SendEmail(Appointment appointment, User user)
    {
        emailService = new EmailService(user.Email, appointment);
        emailService.SendEmail();
        return true;
    }
    private void UpdateDaysOfMonth(int year, int month)
    {
        int daysInMonth = DateTime.DaysInMonth(year, month);
        var item1 = Enumerable.Range(1, daysInMonth).ToArray();
        CalendarInfoObj.Days.Clear();
        foreach (var item in item1)
            CalendarInfoObj.Days.Add(item);
    }
    private int GetStartDay(int year, int month)
    {
        DateTime firstDayOfMonth = new DateTime(year, month, 1);
        return weekdayDictionary[firstDayOfMonth.DayOfWeek];
    }
    private void DecreaseMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}.";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);
    }
    private void IncreaseMonth()
    {
        currentDate = currentDate.AddMonths(1);
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);
    }
    private bool IsTodaysDate(int day)
    {
        return currentDate.Month == DateTime.Now.Month && day == DateTime.Now.Day;
    }
}