@page "/appointment"
@inject AppointmentService appointmentService
@inject AuthenticationStateProvider authStateProvider
@inject UserService userService;
@inject EmailService emailService
@inject IJSRuntime JSRunTime
@inject EmailService emailService
@using System.Globalization;
@using HealthCare.Core.Models.Appointment;
@using System.Text.RegularExpressions;

<div class="appointment-flex">
    <div class="calendar">
        <header>
            <div id="header-div">
                <img @onclick="DecreaseMonth" src="\calendar-arrow.png" title="Change month" alt="Healhcare logo"
                    class="calendar-info-arrow">
                <h1 id="year-month">@yearMonth</h1>
                <img @onclick="IncreaseMonth" src="\calendar-arrow.png" title="Change month"
                    class="calendar-info-arrow rotate-180">
            </div>
        </header>

        <ul class="weekdays">
            <li>
                <abbr title="M">Monday</abbr>
            </li>
            <li>
                <abbr title="T">Tuesday</abbr>
            </li>
            <li>
                <abbr title="W">Wednesday</abbr>
            </li>
            <li>
                <abbr title="T">Thursday</abbr>
            </li>
            <li>
                <abbr title="F">Friday</abbr>
            </li>
            <li>
                <abbr title="S">Saturday</abbr>
            </li>
            <li>
                <abbr title="S">Sunday</abbr>
            </li>
        </ul>

        <ol class="day-grid">

            @for (int i = 0; i < GetStartDay(currentDate.Year, currentDate.Month); i++)
            {
                <li class="empty-day"></li>
            }
            @foreach (int item in CalendarInfoObj.Days)
            {
                <li class="date-day @(IsTodaysDate(item) ? "current-date" : "") @(CalendarInfoObj.DayFocused == item && CalendarInfoObj.Month == currentDate.Month ? "date-day-focus" : "")"
                    @onclick="() => HandleChosenDate(item, userLoggedIn)"
                    @onmouseover="() => OnMouseOverDate(item, userLoggedIn)" @onmouseout="OnMouseOut">
                    @item

                    @if (AvailableHoverDay == item)
                    {
                        <div class="hover-div">
                            <span><u>@AvailableHover</u></span>
                            <span class="hover-div-text">Times Available</span>
                        </div>
                    }
                </li>
            }
        </ol>
    </div>
    @if (chosenDay != null)
    {
        @if (userLoggedIn.Role == RoleEnum.Patient)

        {
            <div id="day-info">
                <header>
                    <h3>
                        There are @appointmentsForDate.Length appointments available for booking @chosenDay of
                        @CalendarInfoObj.GetMonthName(CalendarInfoObj.Month);
                    </h3>
                </header>
                @if (successMsg != "")

                {
                    <p class="alert alert-success">@successMsg</p>
                }
                @if (errorMsg != "")

                {
                    <p class="alert alert-error">@successMsg</p>
                }


                @* filtering starts here *@
                <div class="filter-container">
                    <input class="name-filter" type="text" @bind="careGiverNameFilter" @oninput="FilterByName" placeholder="Filter by name" />

                    <label for="time-slot-filter">Select Time Slot:</label>
                    <select id="time-slot-filter" @onchange="FilterByTime">
                        @foreach (var timeSlot in Enum.GetValues(typeof(TimeSlots)).Cast<TimeSlots>())
                        {
                            <option value="@timeSlot">@timeSlot.ToString()</option>
                        }
                    </select>
                </div>

                @* filtering ends here *@

                <table>
                    <thead>
                        <tr>
                            <th>Doctor</th>
                            <th>Contact</th>
                            <th>Appointment date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Appointment item in appointmentsForDate)

                        {
                            <tr>
                                <td>@item.CareGiver.FirstName @item.CareGiver.LastName</td>
                                <td>@item.CareGiver.Email</td>
                                <td>@item.DateTime.ToString("M/d/yyyy h:mm") - @item.DateTime.AddHours(1).ToString("h:mm")</td>
                                <td>
                                    <select id="selectedService"
                                        @onchange="@(e => HandleServiceSelection((ServiceEnum)Enum.Parse(typeof(ServiceEnum), e.Value.ToString())))">
                                        <option value="">Select Service</option>
                                        @foreach (ServiceEnum service in Enum.GetValues(typeof(ServiceEnum)))

                                        {
                                            <option value="@service">@service.GetDisplayName()</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <button class="btn btn-primary" @onclick="() => HandleBooking(item)">Book</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        else if (userLoggedIn.Role == RoleEnum.Doctor)

        {
            <div class="day-info">
                <header>
                    <h3>
                        Click on a date to check availability
                    </h3>
                </header>
                <button class="btn btn-primary" @onclick="() => ToggleAvailabilityForADay(userLoggedIn.Id,
                    new DateTime(currentDate.Year, CalendarInfoObj.Month, CalendarInfoObj.DayFocused))">
                    @if (appointmentsForBooking.Any())

                    {
                        <text>Set unavailable all day</text>
                        isAvailableAllDay = true;

                    }

                    else

                    {
                        <text>Set available all day</text>
                        isAvailableAllDay = false;

                    }
                </button>
                <select @onchange="@(async (args) => await ToggleAvailability(userLoggedIn.Id, new DateTime(currentDate.Year, CalendarInfoObj.Month,
                        CalendarInfoObj.DayFocused), args.Value.ToString()))">
                    <option value="">Select Time Slot To Add or Remove</option>
                    @foreach (var time in appointmentService.GetAvailableTimes())

                    {
                        <option value="@time">@time:00</option>
                    }
                </select>
                <table>
                    <thead>
                        <tr>
                            @if (appointmentsForBooking.Any(a => a.Patient != null || a.Patient == null))
                            {
                                <th>Patient</th>
                                <th>Contact</th>
                                <th>Appointment date</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Appointment item in appointmentsForBooking)

                        {
                            @if (item.Patient != null)

                            {
                                <tr>
                                    <td>@item.Patient.FirstName @item.Patient.LastName</td>
                                    <td>@item.Patient.Email</td>
                                    <td>@item.DateTime.ToString("M/d/yyyy h:mm") - @item.DateTime.AddHours(1).ToString("h:mm")</td>
                                </tr>
                            }

                            else

                            {
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td>@item.DateTime.ToString("M/d/yyyy h:mm") - @item.DateTime.AddHours(1).ToString("h:mm")</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    public class CalendarInfo
    {
        public int DayFocused { get; set; }
        public List<int> Days { get; set; }
        public int Month { get; set; }
        public CalendarInfo()
        {
            Days = new List<int>();
        }
        public string GetMonthName(int monthNumber)
        {
            CultureInfo cultureInfo = CultureInfo.CurrentCulture;
            return cultureInfo.DateTimeFormat.GetMonthName(monthNumber);
        }
    }
    private DateTime currentDate = DateTime.Now;
    private string yearMonth = "";
    // Appointments for the date the doctor has selected
    private Appointment[] appointmentsForBooking = { };
    // Appointments for the date that the patient has selected.
    private Appointment[] appointmentsForDate = { };
    private int? chosenDay = null;

    private CalendarInfo CalendarInfoObj = new();

    private User userLoggedIn;
    private string successMsg = "";
    private string errorMsg = "";
    Dictionary<DayOfWeek, int> weekdayDictionary = new Dictionary<DayOfWeek, int>
{
{ DayOfWeek.Monday, 0 },
{ DayOfWeek.Tuesday, 1 },
{ DayOfWeek.Wednesday, 2 },
{ DayOfWeek.Thursday, 3 },
{ DayOfWeek.Friday, 4 },
{ DayOfWeek.Saturday, 5 },
{ DayOfWeek.Sunday, 6 }
};
    private ServiceEnum selectedService;
    private bool isAvailableAllDay;
    private string AvailableHover = "";
    private int? AvailableHoverDay = null;
    private bool? IsMobile = null;
    private void HandleServiceSelection(ServiceEnum service)
    {
        selectedService = service;
    }
    // Array to save original appointments so that they can be returned after filtering
    private Appointment[] resetFilteredAppointments = { };
    private string careGiverNameFilter = "";
    private TimeSlots appointmentTimeFilter;
    public enum TimeSlots
    {
        All,
        Slot_08_00 = 8,
        Slot_09_00 = 9,
        Slot_10_00 = 10,
        Slot_11_00 = 11,
        Slot_12_00 = 12,
        Slot_13_00 = 13,
        Slot_14_00 = 14,
        Slot_15_00 = 15
    }
    protected override async Task OnInitializedAsync()
    {
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userEmail = user.FindFirst(c => c.Type ==
        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value;

        if (userEmail != null)
        {
            userLoggedIn = userService.GetByEmail(userEmail);
        }
        appointmentService.AddSampleData();
    }
   protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            //This is where we check is user is on mobile.
            //Hover effect was making a mess on mobiles.
            if (firstRender)
            {
                await Task.Delay(500); 
                IsMobile = await JSRunTime.InvokeAsync<bool>("isDevice",  new object[] { });
                Console.WriteLine();
            }
        }
    public async void OnMouseOverDate(int day, User user)
    {
        //Checking if user is on a mobile device.
        //Hover effect doesn work well on smaller screens.
        if(IsMobile != null && IsMobile.Value == true)
            return;

        var dateToCheck = new DateTime(currentDate.Year, currentDate.Month, day);
        if (user.Role == RoleEnum.Patient && AvailableHoverDay == null)
        {
            AvailableHoverDay = day;
            AvailableHover = appointmentService.GetInitialAppointmentsByDate(dateToCheck).ToArray().Length.ToString();
        }
    }
    private void OnMouseOut()
    {
        AvailableHoverDay = null;
    }
    private async Task ToggleAvailability(int doctorId, DateTime dateToToggle, string selectedTime)
    {
        if (!string.IsNullOrEmpty(selectedTime))
        {
            int timeSelected = int.Parse(selectedTime);

            bool appointmentExists = await appointmentService.CheckAppointmentExists(doctorId, dateToToggle, new
            TimeSpan(timeSelected, 0, 0));
            if (appointmentExists)
            {
                await appointmentService.RemoveInitialAppointment(doctorId, dateToToggle, new TimeSpan(timeSelected, 0, 0));
            }
            else
            {
                await appointmentService.AddInitialAppointment(doctorId, dateToToggle, new TimeSpan(timeSelected, 0, 0));
            }
            appointmentsForBooking = appointmentService.GetAvailabilityByDate(doctorId, dateToToggle).ToArray();
        }
    }
    private void ToggleAvailabilityForADay(int doctorId, DateTime dateToToggle)
    {
        if (isAvailableAllDay)
        {
            appointmentService.RemoveInitialAppointmentsForADay(doctorId, dateToToggle);

            appointmentsForBooking = appointmentService.GetAvailabilityByDate(doctorId, dateToToggle).ToArray();
        }
        else
        {
            appointmentService.AddInitialAppointmentsForADay(doctorId, dateToToggle);

            appointmentsForBooking = appointmentService.GetAvailabilityByDate(doctorId, dateToToggle).ToArray();
        }
        isAvailableAllDay = !isAvailableAllDay;
    }
    private void HandleChosenDate(int day, User user)
    {
        CalendarInfoObj.DayFocused = day;

        var dateToCheck = new DateTime(currentDate.Year, currentDate.Month, day);

        chosenDay = day;

        CalendarInfoObj.Month = currentDate.Month;
        if (user.Role == RoleEnum.Patient)
        {
            appointmentsForDate = appointmentService.GetInitialAppointmentsByDate(dateToCheck).ToArray();
            resetFilteredAppointments = appointmentService.GetAppointmentsByDate(dateToCheck).ToArray();
        }
        else if (user.Role == RoleEnum.Doctor)
        {
            appointmentsForBooking = appointmentService.GetAvailabilityByDate(user.Id, dateToCheck).ToArray();
            appointmentsForBooking = appointmentService.GetAvailabilityByDate(user.Id, dateToCheck).ToArray();
        }
    }
    private void HandleBooking(Appointment appointment)
    {
        var success = appointmentService.AddBooking(appointment, userLoggedIn.Id, selectedService);

        bool emailSentSuccess = false;
        if (success)
            emailSentSuccess = SendEmail(appointment, userLoggedIn);
        if (emailSentSuccess)
        {
            successMsg = "Your appointment was booked successfully! Please check your email for confirmation.";
            return;
        }
        errorMsg = "There was a problem booking your appointment, please try again";
    }
    public bool SendEmail(Appointment appointment, User user)
    {
        emailService = new EmailService(user.Email, appointment);
        emailService.SendEmail();
        return true;
    }
    private void UpdateDaysOfMonth(int year, int month)
    {
        int daysInMonth = DateTime.DaysInMonth(year, month);
        var item1 = Enumerable.Range(1, daysInMonth).ToArray();
        CalendarInfoObj.Days.Clear();
        foreach (var item in item1)

            CalendarInfoObj.Days.Add(item);
    }

    private int GetStartDay(int year, int month)
    {
        DateTime firstDayOfMonth = new DateTime(year, month, 1);
        return weekdayDictionary[firstDayOfMonth.DayOfWeek];
    }
    private void DecreaseMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}.";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);
    }
    private void IncreaseMonth()
    {
        currentDate = currentDate.AddMonths(1);
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);
    }
    private bool IsTodaysDate(int day)
    {
        return currentDate.Month == DateTime.Now.Month && day == DateTime.Now.Day;
    }

    private void FilterByName(ChangeEventArgs e)
    {
        careGiverNameFilter = e.Value.ToString();
        FilterCareGivers();
    }

    private void FilterByTime(ChangeEventArgs e)
    {
        if (Enum.TryParse<TimeSlots>(e.Value.ToString(), out var selectedSlot))
        {
            appointmentTimeFilter = selectedSlot;
            FilterCareGivers();
        }
    }

    private void FilterCareGivers()
    {
        if (!string.IsNullOrWhiteSpace(careGiverNameFilter))
        {
            string regexPattern = $"^{Regex.Escape(careGiverNameFilter)}.*";
            appointmentsForDate = appointmentsForDate.Where(n =>
                Regex.IsMatch($"{n.CareGiver.FirstName} {n.CareGiver.LastName}", regexPattern, RegexOptions.IgnoreCase)).ToArray();
        }
        else
        {
            appointmentsForDate = resetFilteredAppointments;
        }

        if (appointmentTimeFilter != TimeSlots.All)
        {
            int hourToFilter = (int)appointmentTimeFilter;
            appointmentsForDate = appointmentsForDate.Where(a => a.DateTime.Hour == hourToFilter).ToArray();
        }
    }


}