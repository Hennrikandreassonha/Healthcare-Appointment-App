@*the AppointmentService is added in program.cs *@
@inject FeedbackService feedbackService
@inject HealthCare.Core.Data.HealthcareContext dbContext
@*sets the component as a route, nav is changes to this route => see NavMenu*@
@page "/feedback"

<div>
    <div>
        <header>
            <h1>Feedback</h1>
        </header>

        <div class="dropdown-flex">
            <span>Feedback from previous clients:</span>
            <div class="btn-group dropleft dropdown">
                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown"
                    aria-haspopup="true" aria-expanded="false">
                    Sort by
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" onclick="@(() => SortAppointments("All"))">All</a>
                    <a class="dropdown-item" onclick="@(() => SortAppointments("fiveStars"))">Only 5 stars</a>
                    <a class="dropdown-item" onclick="@(() => SortAppointments("fourStars"))">Only 4 stars</a>
                    <a class="dropdown-item" onclick="@(() => SortAppointments("lowToHigh"))">Low to high</a>
                    <a class="dropdown-item" onclick="@(() => SortAppointments("highToLow"))">High to low</a>
                </div>
            </div>

        </div>
    </div>

    <div class="feedback-table">
        <table>
            <thead>
                <tr>
                    <th>Patient</th>
                    <th>Feedback</th>
                    <th>Rating</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Appointment appointments in sortedAppointments)
                {
                    <tr>
                        <td> @GetFirstNameOfPatient(appointments.PatientId)</td>
                        <td>@appointments.Feedback</td>
                        <td>
                            <p>
                                @for (int i = 0; i < 5; i++)
                                {
                                    <span
                                        class="feedback-star @(i < appointments.Rating ? "feedback-gold-star" : "")">&#x2605;
                                    </span>
                                }
                            </p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    List<Appointment> feedbackAppointments = new List<Appointment>();
    List<Appointment> sortedAppointments = new List<Appointment>();


    protected override async Task OnInitializedAsync()
    {
        feedbackAppointments = feedbackService.GetAllFeedBack();
        sortedAppointments.AddRange(feedbackAppointments);
    }

    public string GetFirstNameOfPatient(int? id)
    {
        var patient = dbContext.Patient.FirstOrDefault(x => x.Id == id);

        return patient.FirstName;
    }
    public void SortAppointments(string selectedOptions)
    {
        if (selectedOptions == "fiveStars")
        {

            sortedAppointments = feedbackAppointments.Where(r => r.Rating == 5).ToList();
        }
        else if (selectedOptions == "fourStars")
        {

            sortedAppointments = feedbackAppointments.Where(r => r.Rating == 4).ToList();
        }
        else if (selectedOptions == "lowToHigh")
        {

            sortedAppointments = feedbackAppointments.OrderBy(r => r.Rating).ToList();
        }
        else if (selectedOptions == "highToLow")
        {

            sortedAppointments = feedbackAppointments.OrderByDescending(r => r.Rating).ToList();
        }
        else
        {
            sortedAppointments = feedbackService.GetAllFeedBack();
        }
    }
}
