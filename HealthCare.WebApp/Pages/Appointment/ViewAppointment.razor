@*the AppointmentService is added in program.cs *@
@inject AppointmentService appointmentService
@inject AuthenticationStateProvider authStateProvider
@inject UserService userService;
@*sets the component as a route, nav is changes to this route => see NavMenu*@
@page "/appointment"
@using System.Globalization

<div class="appointment-flex">
    <div class="calendar">
        <header>
            <span @onclick="DecreaseMonth" class="month-change" title="Change month">&lt;</span>
            <h1 id="year-month">@yearMonth</h1>
            <span @onclick="IncreaseMonth" class="month-change" title="Change month">></span>

        </header>

        <ul class="weekdays">
            <li>
                <abbr title="M">Monday</abbr>
            </li>
            <li>
                <abbr title="T">Tuesday</abbr>
            </li>
            <li>
                <abbr title="W">Wednesday</abbr>
            </li>
            <li>
                <abbr title="T">Thursday</abbr>
            </li>
            <li>
                <abbr title="F">Friday</abbr>
            </li>
            <li>
                <abbr title="S">Saturday</abbr>
            </li>
            <li>
                <abbr title="S">Sunday</abbr>
            </li>
        </ul>

        <ol class="day-grid">
            @* <li class="month=prev">29</li>
            <li class="month=prev">30</li>
            <li class="month=prev">31</li> *@
            @for (int i = 0; i < GetStartDay(currentDate.Year, currentDate.Month); i++)
            {
                <li class="empty-day"></li>
            }
            @foreach (var item in dayList)
            {
                <li class="date-day @(IsTodaysDate(item) ? "current-date" : "")" tabIndex="-1"
                    @onclick="() => HandleChosenDate(item)">@item</li>
            }
            @* <li class="month-next">1</li>
            <li class="month-next">2</li> *@
        </ol>

    </div>

    @if (chosenDay != null)
    {
        <div id="day-info">
            <header>

                <h3>There are @appointmentsForDate.Length appointments available for booking for @chosenDay
                    @currentDate.ToString("MMMM", CultureInfo.InvariantCulture)
                </h3>
            </header>
            @if (successMsg != "")
            {
                <p class="alert alert-success">@successMsg</p>
            }
            <table>
                <thead>
                    <tr>
                        <th>Doctor</th>
                        <th>Contact</th>
                        <th>Appointment date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Appointment item in appointmentsForDate)
                    {
                        <tr>
                            <td>@item.CareGiver.FirstName @item.CareGiver.LastName</td>
                            <td>@item.CareGiver.Email</td>
                            <td>@item.DateTime.ToString("M/d/yyyy h:mm") - @item.DateTime.AddHours(1).ToString("h:mm")</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => HandleBooking(item)">Book</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private DateTime currentDate = DateTime.Now;
    private string yearMonth = "";
    private List<int> dayList = new();

    //Appointments for the date that the user has selected.
    private Appointment[] appointmentsForDate = { };
    private int? chosenDay = null;
    private Patient? userLoggedIn;
    private string successMsg = "";
    Dictionary<DayOfWeek, int> weekdayDictionary = new Dictionary<DayOfWeek, int>
{
{ DayOfWeek.Monday, 0 },
{ DayOfWeek.Tuesday, 1 },
{ DayOfWeek.Wednesday, 2 },
{ DayOfWeek.Thursday, 3 },
{ DayOfWeek.Friday, 4 },
{ DayOfWeek.Saturday, 5 },
{ DayOfWeek.Sunday, 6 }
};

    protected override async Task OnInitializedAsync()
    {
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userLoggedIn = userService.GetByEmail(user.FindFirst(c => c.Type ==
        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value) as Patient;

        appointmentService.AddSampleData();
    }
    private void HandleChosenDate(int day)
    {
        var dateToCheck = new DateTime(currentDate.Year, currentDate.Month, day);
        chosenDay = day;
        appointmentsForDate = appointmentService.GetAppointmentsByDate(dateToCheck).ToArray();
    }
    private void HandleBooking(Appointment appointment)
    {
        var success = appointmentService.AddBooking(appointment, userLoggedIn.Id);
        if (success)
            successMsg = "Your appointment was booked successfully!";

    }
    private void UpdateDaysOfMonth(int year, int month)
    {
        int daysInMonth = DateTime.DaysInMonth(year, month);
        dayList = Enumerable.Range(1, daysInMonth).ToList();

        //Kolla vart den börjar på vilken dag och sedan börja loopa därifrån?
        DateTime firstDayOfMonth = new DateTime(year, month, 1);

    }
    private int GetStartDay(int year, int month)
    {
        DateTime firstDayOfMonth = new DateTime(year, month, 1);

        return weekdayDictionary[firstDayOfMonth.DayOfWeek];
    }
    private void DecreaseMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}.";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);
    }
    private void IncreaseMonth()
    {
        currentDate = currentDate.AddMonths(1);
        yearMonth = $"{currentDate.ToString("MMMM")} {currentDate.Year.ToString()}";
        UpdateDaysOfMonth(currentDate.Year, currentDate.Month);
    }
    private bool IsTodaysDate(int day)
    {
        return currentDate.Month == DateTime.Now.Month && day == DateTime.Now.Day;
    }
}
