@page "/"
@inject AuthenticationStateProvider authStateProvider
@inject IHttpContextAccessor _httpContextAccessor;
@inject HealthCare.Core.UserService.IUserService userService
@using HealthCare.Core.Data
@using HealthCare.Core.Models.AppointmentModels
@inject HealthcareContext _context
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager



<PageTitle>Index</PageTitle>
<div>
    <AuthorizeView>
        <Authorized>
            <div class="container row">
                <h1>Hello, @context.User.Identity.Name!</h1>
                
                <p>Welcome to Health Care AB</p>



                <div class="col mb-3">
                    <h3>Upcoming appointments</h3>

                    @if (UpcomingAppointments != null)
                    {
                        <ul class="list-unstyled">
                            @foreach (var appointment in UpcomingAppointments)
                            {
                                <li>Date: @appointment.DateTime Service: @appointment.Service Caregiver: @GetNameOfDoctor(appointment.CareGiverId) 
                                    <button class="btn btn-danger" @onclick="(e) => RemoveAppointment(appointment)" >Cancel</button></li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No upcoming appointments</p>
                    }
                </div>

                <div class="col mb-3">
                    <h3>Previous appointments</h3>
                    @if (PreviousAppointments != null)
                    {
                        <ul class="list-unstyled">
                            @foreach (var appointment in PreviousAppointments)
                            {
                                <li>Date: @appointment.DateTime Service: @appointment.Service Caregiver: @GetNameOfDoctor(appointment.CareGiverId)</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No previous appointments</p>
                    }
                </div>

            </div>

        </Authorized>
        <NotAuthorized>
            <h1>Hello, Guest!</h1>
            <p> You'll need to <a href="/login">log in</a> to see any information.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>
@* <BookingComponent /> *@

@code {
    private string userName = "";
    private User LoggedInUser;
    private List<Appointment> UpcomingAppointments = new();
    private List<Appointment> PreviousAppointments = new();
    public string NameOfDoctor = "";


    protected override async Task OnInitializedAsync()
    {
        userName = await userService.GetEmailAsync();
        LoggedInUser = userService.GetByEmail(userName);
        GetAllMeetings(LoggedInUser);
    }


    private void GetAllMeetings(User loggedInUser)
    {
        List<Appointment> appointments;

        if (loggedInUser is Patient)
        {
            appointments = _context.Appointment.Where(x => x.PatientId == loggedInUser.Id).ToList();

            foreach (var appointment in appointments)
            {
                if (appointment.DateTime > DateTime.Now)
                {
                    UpcomingAppointments.Add(appointment);
                }
                else
                {
                    PreviousAppointments.Add(appointment);
                }
            }
        }
    }

    private string GetNameOfDoctor(int careGiverId)
    {
        var careGiver = _context.CareGiver.FirstOrDefault(x => x.Id == careGiverId);

        return NameOfDoctor = $"{careGiver.FirstName} {careGiver.LastName}";
    }



    private void RemoveAppointment(Appointment appointment)
    {
        if(appointment != null)
        {
            appointment.PatientId = null;
            appointment.Service = null;

            _context.Update(appointment);
            _context.SaveChanges();

            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }
}