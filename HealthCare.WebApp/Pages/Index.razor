@page "/"
@inject AuthenticationStateProvider authStateProvider
@inject IHttpContextAccessor _httpContextAccessor;
@inject HealthCare.Core.UserService.IUserService userService
@using HealthCare.Core.Data
@using HealthCare.Core.Models.AppointmentModels
@inject HealthcareContext _context
@inject EmailService emailService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager



<PageTitle>Index</PageTitle>
<div>
     <AuthorizeView>
          <Authorized>
               <div class="header-div">
                    <h1>Hello, @context.User.Identity.Name! Welcome to <span class="color-blue">Health Care AB</span>
                    </h1>
                    <p>
                         you have <u>@UpcomingAppointments.Count</u> upcoming appointments
                    </p>
               </div>

               <div class="container-flex">
                    <div class="upcoming-div">
                         <header>
                              <h3>Upcoming appointments</h3>
                         </header>
                         @if (UpcomingAppointments != null)
                         {
                              <table>
                                   <thead>
                                        <tr>
                                             <th>Date</th>
                                             <th>Service</th>
                                             <th>Doctor</th </tr>
                                   </thead>
                                   <tbody>
                                        @foreach (Appointment appointment in UpcomingAppointments)
                                        {
                                             <tr>
                                                  <td>@appointment.DateTime</td>
                                                  <td>@appointment.Service</td>
                                                  <td>@GetNameOfDoctor(appointment.CareGiverId)</td>
                                                  <td>
                                                       <button class="btn btn-danger"
                                                            @onclick="(e) => RemoveAppointment(appointment)">Cancel</button>
                                                  </td>
                                             </tr>
                                        }
                                   </tbody>
                              </table>
                         }
                         else
                         {
                              <p>No upcoming appointments</p>
                         }
                    </div>
                    <div class="passed-div">
                         <header>
                              <h3>Previous appoinments</h3>
                         </header>
                         <table>
                              <thead>
                                   <tr>
                                        <th>Date</th>
                                        <th>Service</th>
                                        <th>Doctor</th </tr>
                              </thead>
                              <tbody>
                                   @foreach (Appointment appointment in PreviousAppointments)
                                   {
                                        <tr>
                                             <td>@appointment.DateTime</td>
                                             <td>@appointment.Service</td>
                                             <td>@GetNameOfDoctor(appointment.CareGiverId)</td>
                                             <td>
                                                  <button class="btn btn-danger"
                                                       @onclick="(e) => RemoveAppointment(appointment)">Leave
                                                       feedback</button>
                                             </td>
                                        </tr>
                                   }
                              </tbody>
                         </table>

                    </div>
               </div>
          </Authorized>
          <NotAuthorized>
               <h1>Hello, Guest!</h1>
               <p> You'll need to <a href="/login">log in</a> to see any information.</p>
          </NotAuthorized>
     </AuthorizeView>
</div>
@* <BookingComponent /> *@

@code {
     private string userName = "";
     private User LoggedInUser;
     private List<Appointment> UpcomingAppointments = new();
     private List<Appointment> PreviousAppointments = new();
     public string NameOfDoctor = "";


     protected override async Task OnInitializedAsync()
     {
          userName = await userService.GetEmailAsync();
          LoggedInUser = userService.GetByEmail(userName);
          GetAllMeetings(LoggedInUser);
     }
     private void GetAllMeetings(User loggedInUser)
     {
          List<Appointment> appointments;

          if (loggedInUser is Patient)
          {
               appointments = _context.Appointment.Where(x => x.PatientId == loggedInUser.Id).ToList();

               foreach (var appointment in appointments)
               {
                    if (appointment.DateTime > DateTime.Now)
                    {
                         UpcomingAppointments.Add(appointment);
                    }
                    else
                    {
                         PreviousAppointments.Add(appointment);
                    }
               }
          }
     }
     private string GetNameOfDoctor(int careGiverId)
     {
          var careGiver = _context.CareGiver.FirstOrDefault(x => x.Id == careGiverId);

          return NameOfDoctor = $"{careGiver.FirstName} {careGiver.LastName}";
     }

     private void RemoveAppointment(Appointment appointment)
     {
          if (appointment != null)
          {
               SendCancelEmail(appointment, LoggedInUser);
               appointment.PatientId = null;
               appointment.Service = null;

               _context.Update(appointment);
               _context.SaveChanges();

               NavigationManager.NavigateTo(NavigationManager.Uri, true);
          }
     }
     public bool SendCancelEmail(Appointment appointment, User user)
     {
          emailService = new EmailService(user.Email, appointment);
          emailService.SendEmail(false);
          return true;
     }
}